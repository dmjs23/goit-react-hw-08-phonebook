{"version":3,"file":"static/js/738.156fafbc.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactListElement/ContactListElement.module.css?26ad","components/ContactList/ContactListElement/ContactListElement.jsx","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/ContactsPage/ContactsPage.module.css?0a45","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button\":\"ContactForm_button__eSwX9\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"form\":\"ContactForm_form__dhl+T\"};","import { useState } from 'react';\nimport { useGetContactsQuery, useAddContactMutation } from 'api/contactsAPI';\nimport { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\n\nfunction ContactForm  ({ onSubmit })  {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const { data: contacts } = useGetContactsQuery();\n  const [addContact] = useAddContactMutation();\n\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    if (contacts.find(cont => cont.name.toLowerCase() === name.toLowerCase())) {\n      return Notify.failure(`${name} is already in contacts`)\n    }\n    const id = nanoid()\n    addContact({ id, name, number })\n    setName('')\n    setNumber('')\n  }\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label className={styles.label} htmlFor=\"nameInputId\">\n        Name \n      </label>\n      <input\n        value={name}\n        type=\"text\"\n        name=\"name\"\n        id=\"nameInputId\"\n        placeholder=\"Enter Name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={e => setName(e.currentTarget.value)}\n        className={styles.input}/>\n      <br/>\n      <label className={styles.label} htmlFor=\"numberInputId\">\n        Number\n      </label>\n      <input\n        value={number}\n        type=\"tel\"\n        name=\"number\"\n        id=\"numberInputId\"\n        placeholder=\"Enter Number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        onChange={e => setNumber(e.currentTarget.value)}\n        className={styles.input}/>\n      <br />\n      <button className={styles.button} type=\"submit\">\n        Add Contact\n      </button>\n    </form>\n  )\n}\n\nexport default ContactForm\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"ContactListElement_button__jPU+q\"};","import { useDeleteContactMutation } from '../../../api/contactsAPI';\nimport PropTypes from 'prop-types';\nimport styles from './ContactListElement.module.css';\n\nconst ContactListElement = ({ id, name, number }) => {\n  const [deleteContact] = useDeleteContactMutation();\n  return (\n    <>\n      <li key={id}>\n        <span>\n          {name}: {number}\n        </span>\n        <button className={styles.button} onClick={() => deleteContact(id)}>\n          Delete\n        </button>\n      </li>\n    </>\n  )\n}\n\nexport default ContactListElement\n\nContactListElement.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n}","import React from \"react\";\nimport { useSelector } from 'react-redux';\nimport { useGetContactsQuery } from \"api/contactsAPI\";\nimport PropTypes from 'prop-types';\nimport Loader from 'components/Loader/Loader';\nimport ContactListElement from './ContactListElement/ContactListElement';\n\nconst ContactList = () => {\n  const filter = useSelector(state => state.contactsReducer.filter);\n  const { data: contacts, isFetching, isError } = useGetContactsQuery();\n  const filteredContacts = contacts && contacts.filter(contact => contact.name.toLowerCase().includes(filter));\n  const isContactsEmpty = filteredContacts && filteredContacts.length > 0;\n\n  return (\n    <>\n      {isFetching && <Loader color={'#3f51b5'} size={32} />}\n      {isError && console.log(isError)}\n      {isContactsEmpty ? (\n        <ul>\n          {filteredContacts.map(({ id, name, number }) => (\n            <ContactListElement key={id} id={id} name={name} number={number} />\n          ))}\n        </ul>\n      ) : (\n        <ul>\n          <p>The phonebook is empty...</p>\n        </ul>\n      )}\n    </>\n  )\n}\n\nexport default ContactList\n\nContactList.propTypes = {\n  filteredContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  )\n}","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__N7T3z\",\"title\":\"Filter_title__pSkfx\"};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterContact } from '../../redux/contacts/contactsActions';\nimport styles from './Filter.module.css';\nimport PropTypes from 'prop-types';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.contactsReducer.filter);\n  const onChange = e => dispatch(filterContact(e));\n\n  return (\n    <div className={styles.section}>\n      <label htmlFor=\"filter\" >\n        <h2 className={styles.title}>Find contact by name:</h2>\n        <input\n          type=\"text\"\n          name=\"filter\"\n          id='filter'\n          value={filter}\n          onChange={onChange}\n          className={styles.input}\n          placeholder=\"Find name\"/>\n      </label>\n    </div>\n  )\n}\n\nexport default Filter\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n}","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"ContactsPage_section__WlQMx\",\"title\":\"ContactsPage_title__P3MkR\"};","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport styles from './ContactsPage.module.css';\n\nexport default function ContactsPage() {\n  return (\n    <div className={styles.section}>\n      <h1 className={styles.title}>PhoneBook App</h1>\n      <h2>Add new contact</h2>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}"],"names":["onSubmit","useState","name","setName","number","setNumber","contacts","useGetContactsQuery","data","useAddContactMutation","addContact","className","styles","e","preventDefault","find","cont","toLowerCase","Notify","id","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","htmlFor","value","type","placeholder","pattern","title","required","onChange","currentTarget","useDeleteContactMutation","deleteContact","onClick","filter","useSelector","state","contactsReducer","isFetching","isError","filteredContacts","contact","includes","isContactsEmpty","length","Loader","color","console","log","map","dispatch","useDispatch","filterContact","ContactsPage"],"sourceRoot":""}